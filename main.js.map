{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, OnDestroy, OnInit, Renderer2, ViewChild } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { combineLatest, fromEvent, Observable, of, Subject } from 'rxjs';\nimport { webSocket } from 'rxjs/webSocket';\nimport { first, switchMap, takeUntil } from 'rxjs/operators';\nimport { fromPromise } from 'rxjs/internal-compatibility';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements AfterViewInit, OnDestroy {\n\n  @ViewChild('videoGrid') videoGrid: ElementRef;\n  @ViewChild('video') video: ElementRef;\n\n  title = 'teamMeet';\n  serverData$: Observable<any>;\n\n  private alive$ = new Subject<void>();\n\n  constructor(private cd: ChangeDetectorRef) {\n    this.cd.detach();\n  }\n\n  ngAfterViewInit(): void {\n    // this.serverData$ = this.http.get('api/main');\n    // webSocket('ws://localhost:4200/sockets').pipe(\n    //   takeUntil(this.alive$)\n    // ).subscribe(r => console.log(r));\n    this.cd.detectChanges();\n    this.video.nativeElement.muted = true;\n    navigator.getUserMedia(\n      {\n        audio: true,\n        video: {width: 300, height: 300}\n      },\n      (stream) => {\n        this.video.nativeElement.srcObject = stream;\n        this.video.nativeElement.onloadedmetadata = (e) => {\n          this.video.nativeElement.play();\n          this.cd.detectChanges();\n        };\n      },\n      (err) => {\n        console.log(\"The following error occurred: \" + err.name);\n      }\n    );\n    // fromPromise(navigator.mediaDevices.getUserMedia({\n    //   video: true\n    // })).pipe(\n    //   first(),\n    //   switchMap(stream => {\n    //     this.video.nativeElement.srcObject = stream;\n    //     return fromEvent(this.video.nativeElement, 'loadedmetadata');\n    //   })\n    // ).subscribe((e) => {\n    //   this.video.nativeElement.play();\n    // });\n  }\n\n  close(): void {\n    this.alive$.next();\n    this.alive$.complete();\n  }\n\n  ngOnDestroy(): void {\n    this.close();\n  }\n\n}\n","<h1>MAIN PAGE {{title}}</h1>\n\n<div id=\"video-grid\" #videoGrid>\n  <video #video></video>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}